# Generated by Django 5.2.6 on 2025-09-24 21:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cattle', '0008_animalmultichain_animalnftmirror'),
        ('core', '0002_blockchainnetwork_crosschainmanager_starknetcontract_and_more'),
        ('iot', '0003_iotdevice_auth_token_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IoTDeviceMultichain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=100, unique=True, verbose_name='ID del Dispositivo')),
                ('serial_number', models.CharField(max_length=100, unique=True, verbose_name='Número de Serie')),
                ('device_type', models.CharField(choices=[('CARAVANA', 'Caravana Inteligente'), ('SENSOR_GPS', 'Sensor GPS'), ('SENSOR_TEMPERATURA', 'Sensor de Temperatura'), ('SENSOR_CARDIACO', 'Sensor Cardíaco'), ('SENSOR_MOVIMIENTO', 'Sensor de Movimiento'), ('GATEWAY', 'Gateway IoT'), ('DRONE', 'Dron de Monitoreo')], max_length=20, verbose_name='Tipo de Dispositivo')),
                ('current_location', models.CharField(blank=True, max_length=255, verbose_name='Ubicación Actual')),
                ('status', models.CharField(choices=[('ACTIVE', 'Activo'), ('INACTIVE', 'Inactivo'), ('CALIBRATING', 'Calibrando'), ('MAINTENANCE', 'En Mantenimiento'), ('OFFLINE', 'Desconectado'), ('LOW_BATTERY', 'Batería Baja')], default='ACTIVE', max_length=15, verbose_name='Estado')),
                ('battery_level', models.IntegerField(blank=True, null=True, verbose_name='Nivel de Batería (%)')),
                ('signal_strength', models.IntegerField(blank=True, null=True, verbose_name='Intensidad de Señal')),
                ('blockchain_registered', models.BooleanField(default=False, verbose_name='Registrado en Blockchain')),
                ('blockchain_device_id', models.CharField(blank=True, max_length=255, verbose_name='ID en Blockchain')),
                ('auth_token', models.CharField(blank=True, max_length=100, verbose_name='Token de Autenticación')),
                ('public_key', models.TextField(blank=True, verbose_name='Clave Pública')),
                ('encrypted_private_key', models.TextField(blank=True, verbose_name='Clave Privada Encriptada')),
                ('firmware_version', models.CharField(default='1.0.0', max_length=50, verbose_name='Versión de Firmware')),
                ('manufacturer', models.CharField(blank=True, max_length=100, verbose_name='Fabricante')),
                ('model', models.CharField(blank=True, max_length=100, verbose_name='Modelo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_communication', models.DateTimeField(blank=True, null=True, verbose_name='Última Comunicación')),
                ('animal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='multichain_iot_devices', to='cattle.animal', verbose_name='Animal Asociado')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='multichain_iot_devices', to=settings.AUTH_USER_MODEL)),
                ('preferred_network', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.blockchainnetwork', verbose_name='Red Preferida')),
            ],
            options={
                'verbose_name': 'Dispositivo IoT Multichain',
                'verbose_name_plural': 'Dispositivos IoT Multichain',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GatewayDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gateway_id', models.CharField(max_length=100, unique=True, verbose_name='ID del Gateway')),
                ('name', models.CharField(max_length=200, verbose_name='Nombre del Gateway')),
                ('location', models.CharField(max_length=255, verbose_name='Ubicación')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Dirección IP')),
                ('mac_address', models.CharField(max_length=17, verbose_name='Dirección MAC')),
                ('network_type', models.CharField(choices=[('WIFI', 'Wi-Fi'), ('ETHERNET', 'Ethernet'), ('CELLULAR', 'Cellular'), ('SATELLITE', 'Satellite')], max_length=20, verbose_name='Tipo de Red')),
                ('max_connected_devices', models.IntegerField(default=50, verbose_name='Máximo de Dispositivos')),
                ('data_processing_capability', models.BooleanField(default=True, verbose_name='Procesamiento de Datos')),
                ('blockchain_sync_capability', models.BooleanField(default=True, verbose_name='Sincronización Blockchain')),
                ('status', models.CharField(choices=[('ONLINE', 'Online'), ('OFFLINE', 'Offline'), ('MAINTENANCE', 'En Mantenimiento')], default='ONLINE', max_length=15, verbose_name='Estado')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_heartbeat', models.DateTimeField(blank=True, null=True, verbose_name='Último Latido')),
                ('connected_devices', models.ManyToManyField(blank=True, related_name='gateways', to='iot.iotdevicemultichain', verbose_name='Dispositivos Conectados')),
            ],
            options={
                'verbose_name': 'Gateway IoT',
                'verbose_name_plural': 'Gateways IoT',
            },
        ),
        migrations.CreateModel(
            name='DeviceEventMultichain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('STATUS_CHANGE', 'Cambio de Estado'), ('BATTERY_LOW', 'Batería Baja'), ('DISCONNECTED', 'Desconectado'), ('TAMPER_DETECTED', 'Manipulación Detectada'), ('DATA_ANOMALY', 'Anomalía en Datos'), ('MAINTENANCE_REQUIRED', 'Mantenimiento Requerido'), ('FIRMWARE_UPDATE', 'Actualización de Firmware')], max_length=20, verbose_name='Tipo de Evento')),
                ('severity', models.CharField(choices=[('LOW', 'Bajo'), ('MEDIUM', 'Medio'), ('HIGH', 'Alto'), ('CRITICAL', 'Crítico')], default='LOW', max_length=10, verbose_name='Severidad')),
                ('title', models.CharField(max_length=200, verbose_name='Título')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('event_data', models.JSONField(default=dict, verbose_name='Datos del Evento')),
                ('logged_on_blockchain', models.BooleanField(default=False, verbose_name='Registrado en Blockchain')),
                ('blockchain_transaction_hash', models.CharField(blank=True, max_length=255, verbose_name='Hash de Transacción')),
                ('resolved', models.BooleanField(default=False, verbose_name='Resuelto')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resuelto el')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Notas de Resolución')),
                ('timestamp', models.DateTimeField(verbose_name='Timestamp del Evento')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='iot.iotdevicemultichain')),
            ],
            options={
                'verbose_name': 'Evento de Dispositivo Multichain',
                'verbose_name_plural': 'Eventos de Dispositivo Multichain',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SensorDataMultichain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_type', models.CharField(choices=[('GPS', 'Datos de Ubicación'), ('TEMPERATURE', 'Temperatura'), ('HEART_RATE', 'Ritmo Cardíaco'), ('MOVEMENT', 'Movimiento'), ('HUMIDITY', 'Humedad'), ('PRESSURE', 'Presión Atmosférica'), ('ACCELEROMETER', 'Acelerómetro'), ('GYROSCOPE', 'Giroscopio')], max_length=15, verbose_name='Tipo de Dato')),
                ('raw_data', models.JSONField(verbose_name='Datos Crudos')),
                ('processed_data', models.JSONField(default=dict, verbose_name='Datos Procesados')),
                ('timestamp', models.DateTimeField(verbose_name='Timestamp del Sensor')),
                ('accuracy', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Precisión')),
                ('battery_at_reading', models.IntegerField(blank=True, null=True, verbose_name='Batería al Momento')),
                ('stored_on_blockchain', models.BooleanField(default=False, verbose_name='Almacenado en Blockchain')),
                ('blockchain_networks', models.JSONField(default=list, help_text='Redes donde están almacenados los datos', verbose_name='Redes Blockchain')),
                ('blockchain_hashes', models.JSONField(default=dict, help_text="Hashes de transacción por red: {'STARKNET': '0x123...', 'POLYGON': '0x456...'}", verbose_name='Hashes Blockchain')),
                ('anomalies_detected', models.JSONField(default=list, verbose_name='Anomalías Detectadas')),
                ('alert_triggered', models.BooleanField(default=False, verbose_name='Alerta Activada')),
                ('processed_by_ai', models.BooleanField(default=False, verbose_name='Procesado por IA')),
                ('recorded_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado el')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_data', to='iot.iotdevicemultichain')),
            ],
            options={
                'verbose_name': 'Dato de Sensor Multichain',
                'verbose_name_plural': 'Datos de Sensor Multichain',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='iotdevicemultichain',
            index=models.Index(fields=['device_id'], name='iot_iotdevi_device__f16f2d_idx'),
        ),
        migrations.AddIndex(
            model_name='iotdevicemultichain',
            index=models.Index(fields=['owner', 'status'], name='iot_iotdevi_owner_i_91ee07_idx'),
        ),
        migrations.AddIndex(
            model_name='iotdevicemultichain',
            index=models.Index(fields=['animal', 'device_type'], name='iot_iotdevi_animal__bfe50b_idx'),
        ),
        migrations.AddIndex(
            model_name='iotdevicemultichain',
            index=models.Index(fields=['last_communication'], name='iot_iotdevi_last_co_a11189_idx'),
        ),
        migrations.AddIndex(
            model_name='deviceeventmultichain',
            index=models.Index(fields=['device', 'timestamp'], name='iot_devicee_device__5b0352_idx'),
        ),
        migrations.AddIndex(
            model_name='deviceeventmultichain',
            index=models.Index(fields=['event_type', 'severity'], name='iot_devicee_event_t_288354_idx'),
        ),
        migrations.AddIndex(
            model_name='deviceeventmultichain',
            index=models.Index(fields=['resolved'], name='iot_devicee_resolve_acffae_idx'),
        ),
        migrations.AddIndex(
            model_name='sensordatamultichain',
            index=models.Index(fields=['device', 'timestamp'], name='iot_sensord_device__934211_idx'),
        ),
        migrations.AddIndex(
            model_name='sensordatamultichain',
            index=models.Index(fields=['data_type', 'timestamp'], name='iot_sensord_data_ty_78cbdc_idx'),
        ),
        migrations.AddIndex(
            model_name='sensordatamultichain',
            index=models.Index(fields=['timestamp'], name='iot_sensord_timesta_ef7f09_idx'),
        ),
        migrations.AddIndex(
            model_name='sensordatamultichain',
            index=models.Index(fields=['alert_triggered'], name='iot_sensord_alert_t_ae4d83_idx'),
        ),
    ]
