# Generated by Django 5.2.6 on 2025-09-24 20:56

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0002_blockchainnetwork_crosschainmanager_starknetcontract_and_more'),
        ('users', '0004_rewarddistribution_stakingpool'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAPICredentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(blank=True, max_length=255, verbose_name='API Key')),
                ('api_secret', models.CharField(blank=True, max_length=255, verbose_name='API Secret')),
                ('access_token', models.TextField(blank=True, verbose_name='Access Token')),
                ('refresh_token', models.TextField(blank=True, verbose_name='Refresh Token')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('rate_limit', models.IntegerField(default=1000, verbose_name='Límite de Tasa')),
                ('permissions', models.JSONField(default=dict, verbose_name='Permisos API')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expira el')),
                ('last_used', models.DateTimeField(blank=True, null=True, verbose_name='Último Uso')),
            ],
            options={
                'verbose_name': 'Credenciales API de Usuario',
                'verbose_name_plural': 'Credenciales API de Usuario',
            },
        ),
        migrations.CreateModel(
            name='UserBlockchainRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_type', models.CharField(choices=[('PRODUCER', 'Productor'), ('VETERINARIAN', 'Veterinario'), ('AUDITOR', 'Auditor'), ('CERTIFIER', 'Certificador'), ('CONSUMER', 'Consumidor'), ('ADMIN', 'Administrador')], max_length=20)),
                ('blockchain_role_id', models.CharField(blank=True, max_length=100, verbose_name='ID de Rol en Blockchain')),
                ('granted_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('transaction_hash', models.CharField(blank=True, max_length=255, verbose_name='Transacción de Concesión')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
            ],
            options={
                'verbose_name': 'Rol Blockchain de Usuario',
                'verbose_name_plural': 'Roles Blockchain de Usuario',
            },
        ),
        migrations.CreateModel(
            name='UserMultichainProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_wallet_address', models.CharField(help_text='Wallet principal para recibir pagos y NFTs', max_length=255, verbose_name='Wallet Principal')),
                ('secondary_wallets', models.JSONField(default=dict, help_text="Wallets específicos por blockchain: {'STARKNET': '0x123...', 'POLYGON': '0x456...'}", verbose_name='Wallets Secundarios')),
                ('total_transactions', models.IntegerField(default=0, verbose_name='Total Transacciones')),
                ('transactions_by_network', models.JSONField(default=dict, verbose_name='Transacciones por Red')),
                ('balance_cache', models.JSONField(default=dict, help_text="Saldos de tokens por red: {'STARKNET': {'ETH': 1.5}, 'POLYGON': {'MATIC': 100}}", verbose_name='Saldos en Cache')),
                ('balance_last_updated', models.DateTimeField(blank=True, null=True, verbose_name='Última Actualización de Saldos')),
                ('backup_phrase_stored', models.BooleanField(default=False, verbose_name='Frase de Respaldo Almacenada')),
                ('two_factor_auth', models.BooleanField(default=False, verbose_name='Autenticación en Dos Factores')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Perfil Multichain de Usuario',
                'verbose_name_plural': 'Perfiles Multichain de Usuario',
            },
        ),
        migrations.CreateModel(
            name='UserTransactionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('NFT_MINT', 'Mint de NFT'), ('NFT_TRANSFER', 'Transferencia de NFT'), ('TOKEN_MINT', 'Mint de Tokens'), ('TOKEN_TRANSFER', 'Transferencia de Tokens'), ('CERTIFICATION_ISSUE', 'Emisión de Certificación'), ('SUBSCRIPTION_PAYMENT', 'Pago de Suscripción'), ('REWARD_CLAIM', 'Reclamación de Recompensa')], max_length=30)),
                ('transaction_hash', models.CharField(max_length=255, verbose_name='Hash de Transacción')),
                ('from_address', models.CharField(max_length=255, verbose_name='Dirección Origen')),
                ('to_address', models.CharField(max_length=255, verbose_name='Dirección Destino')),
                ('value', models.DecimalField(decimal_places=18, default=0, max_digits=30, verbose_name='Valor')),
                ('token_symbol', models.CharField(default='NATIVE', max_length=20, verbose_name='Símbolo del Token')),
                ('token_address', models.CharField(blank=True, max_length=255, verbose_name='Dirección del Token')),
                ('block_number', models.BigIntegerField(blank=True, null=True, verbose_name='Número de Bloque')),
                ('gas_used', models.DecimalField(blank=True, decimal_places=0, max_digits=30, null=True, verbose_name='Gas Utilizado')),
                ('gas_price', models.DecimalField(blank=True, decimal_places=0, max_digits=30, null=True, verbose_name='Precio del Gas')),
                ('status', models.CharField(choices=[('PENDING', 'Pendiente'), ('CONFIRMED', 'Confirmada'), ('FAILED', 'Fallida'), ('REVERTED', 'Revertida')], default='PENDING', max_length=10)),
                ('error_message', models.TextField(blank=True, verbose_name='Mensaje de Error')),
                ('related_object_type', models.CharField(blank=True, max_length=50, verbose_name='Tipo de Objeto Relacionado')),
                ('related_object_id', models.CharField(blank=True, max_length=100, verbose_name='ID del Objeto Relacionado')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True, verbose_name='Confirmada el')),
            ],
            options={
                'verbose_name': 'Historial de Transacciones',
                'verbose_name_plural': 'Historial de Transacciones',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='last_multichain_sync',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Última Sincronización Multichain'),
        ),
        migrations.AddField(
            model_name='user',
            name='multichain_enabled',
            field=models.BooleanField(default=False, verbose_name='Multichain Habilitado'),
        ),
        migrations.AlterField(
            model_name='rewarddistribution',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_rewards', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('PRODUCER', 'Productor'), ('VET', 'Veterinario'), ('FRIGORIFICO', 'Frigorífico'), ('AUDITOR', 'Auditor'), ('IOT', 'Dispositivo IoT'), ('ADMIN', 'Administrador'), ('DAO', 'Miembro DAO'), ('CONSUMER', 'Consumidor'), ('VIEWER', 'Solo Lectura'), ('CERTIFICATION_BODY', 'Organismo Certificador')], default='PRODUCER', max_length=20, verbose_name='Rol de Sistema'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['multichain_enabled'], name='users_user_multich_eb2fb4_idx'),
        ),
        migrations.AddField(
            model_name='userapicredentials',
            name='network',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.blockchainnetwork'),
        ),
        migrations.AddField(
            model_name='userapicredentials',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_api_credentials', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userblockchainrole',
            name='granted_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_blockchain_roles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userblockchainrole',
            name='network',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.blockchainnetwork'),
        ),
        migrations.AddField(
            model_name='userblockchainrole',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_blockchain_roles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usermultichainprofile',
            name='default_network',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.blockchainnetwork', verbose_name='Red por Defecto'),
        ),
        migrations.AddField(
            model_name='usermultichainprofile',
            name='preferred_networks',
            field=models.ManyToManyField(blank=True, related_name='preferred_by_users', to='core.blockchainnetwork', verbose_name='Redes Preferidas'),
        ),
        migrations.AddField(
            model_name='usermultichainprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='multichain_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usertransactionhistory',
            name='network',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.blockchainnetwork'),
        ),
        migrations.AddField(
            model_name='usertransactionhistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_transactions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='userapicredentials',
            unique_together={('user', 'network')},
        ),
        migrations.AddIndex(
            model_name='userblockchainrole',
            index=models.Index(fields=['user', 'network'], name='users_userb_user_id_e07ac5_idx'),
        ),
        migrations.AddIndex(
            model_name='userblockchainrole',
            index=models.Index(fields=['role_type', 'is_active'], name='users_userb_role_ty_8d311b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userblockchainrole',
            unique_together={('user', 'network', 'role_type')},
        ),
        migrations.AddIndex(
            model_name='usertransactionhistory',
            index=models.Index(fields=['user', 'timestamp'], name='users_usert_user_id_5b8a50_idx'),
        ),
        migrations.AddIndex(
            model_name='usertransactionhistory',
            index=models.Index(fields=['transaction_hash'], name='users_usert_transac_32786e_idx'),
        ),
        migrations.AddIndex(
            model_name='usertransactionhistory',
            index=models.Index(fields=['network', 'status'], name='users_usert_network_248c51_idx'),
        ),
    ]
