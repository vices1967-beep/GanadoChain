# Generated by Django 5.2.5 on 2025-09-01 23:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('PRODUCER', 'Productor'), ('VET', 'Veterinario'), ('FRIGORIFICO', 'Frigorífico'), ('AUDITOR', 'Auditor'), ('IOT', 'Dispositivo IoT'), ('ADMIN', 'Administrador'), ('DAO', 'Miembro DAO'), ('CONSUMER', 'Consumidor'), ('VIEWER', 'Solo Lectura')], default='PRODUCER', max_length=20, verbose_name='Rol de Sistema')),
                ('wallet_address', models.CharField(max_length=42, unique=True, verbose_name='Dirección Wallet')),
                ('blockchain_roles', models.JSONField(default=list, help_text='Roles asignados en los contratos inteligentes', verbose_name='Roles en Blockchain')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verificado en Blockchain')),
                ('verification_date', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de Verificación')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='Imagen de Perfil')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Teléfono')),
                ('company', models.CharField(blank=True, max_length=100, verbose_name='Empresa/Organización')),
                ('location', models.CharField(blank=True, max_length=200, verbose_name='Ubicación')),
                ('bio', models.TextField(blank=True, verbose_name='Biografía')),
                ('website', models.URLField(blank=True, verbose_name='Sitio Web')),
                ('twitter_handle', models.CharField(blank=True, max_length=50, verbose_name='Twitter')),
                ('discord_handle', models.CharField(blank=True, max_length=50, verbose_name='Discord')),
                ('is_blockchain_active', models.BooleanField(default=True, verbose_name='Activo en Blockchain')),
                ('last_blockchain_sync', models.DateTimeField(blank=True, null=True, verbose_name='Última Sincronización Blockchain')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='APIToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nombre del Token')),
                ('token', models.CharField(max_length=64, unique=True, verbose_name='Token')),
                ('token_type', models.CharField(choices=[('READ', 'Solo Lectura'), ('WRITE', 'Lectura y Escritura'), ('ADMIN', 'Administración'), ('IOT', 'Dispositivo IoT')], default='READ', max_length=10, verbose_name='Tipo de Token')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expira el')),
                ('last_used', models.DateTimeField(blank=True, null=True, verbose_name='Último Uso')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_tokens', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Token de API',
                'verbose_name_plural': 'Tokens de API',
            },
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('LOGIN', 'Inicio de Sesión'), ('LOGOUT', 'Cierre de Sesión'), ('NFT_MINT', 'Mint de NFT'), ('TOKEN_MINT', 'Mint de Tokens'), ('HEALTH_UPDATE', 'Actualización de Salud'), ('ROLE_ASSIGN', 'Asignación de Rol'), ('PROFILE_UPDATE', 'Actualización de Perfil'), ('PASSWORD_CHANGE', 'Cambio de Contraseña'), ('BLOCKCHAIN_INTERACTION', 'Interacción con Blockchain')], max_length=30, verbose_name='Acción')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Dirección IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('metadata', models.JSONField(default=dict, verbose_name='Metadatos')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('blockchain_tx_hash', models.CharField(blank=True, max_length=66, verbose_name='Hash de Transacción')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Registro de Actividad',
                'verbose_name_plural': 'Registros de Actividad',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notificaciones por Email')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Notificaciones Push')),
                ('language', models.CharField(choices=[('es', 'Español'), ('en', 'English')], default='es', max_length=10, verbose_name='Idioma')),
                ('theme', models.CharField(choices=[('light', 'Claro'), ('dark', 'Oscuro'), ('auto', 'Automático')], default='light', max_length=20, verbose_name='Tema')),
                ('animals_per_page', models.IntegerField(default=20, verbose_name='Animales por Página')),
                ('enable_animations', models.BooleanField(default=True, verbose_name='Habilitar Animaciones')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Preferencia de Usuario',
                'verbose_name_plural': 'Preferencias de Usuario',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['wallet_address'], name='users_user_wallet__c9e508_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_user_role_36d76d_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='users_user_is_veri_9ce429_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_blockchain_active'], name='users_user_is_bloc_c188dc_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['company'], name='users_user_company_0735b4_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_user_created_cf865c_idx'),
        ),
        migrations.AddIndex(
            model_name='apitoken',
            index=models.Index(fields=['token'], name='users_apito_token_c05efe_idx'),
        ),
        migrations.AddIndex(
            model_name='apitoken',
            index=models.Index(fields=['user'], name='users_apito_user_id_bb6e48_idx'),
        ),
        migrations.AddIndex(
            model_name='apitoken',
            index=models.Index(fields=['is_active'], name='users_apito_is_acti_633888_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['user', 'timestamp'], name='users_usera_user_id_8957e1_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['action'], name='users_usera_action_2472c4_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivitylog',
            index=models.Index(fields=['timestamp'], name='users_usera_timesta_aabea0_idx'),
        ),
    ]
